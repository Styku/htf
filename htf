import os
import pygame
import time
import random
import XboxController 
import serial

class robogui:
    screen = None;
    gui_image = None;
    limbs = ["No", "Rear left", "Rear right", "Middle left", "Middle right", "Front left", "Front right"] 
    
    def __init__(self):
        os.environ["SDL_FBDEV"] = "/dev/fb1"
        os.environ["SDL_MOUSEDEV"] = "/dev/input/touchscreen"
        os.environ["SDL_MOUSEDRV"] = "TSLIB"
        os.environ["SDL_VIDEODRIVER"] = "fbcon"
        

        pygame.display.init()
        pygame.mouse.set_visible(False)
        
        self.gui_image = pygame.image.load("img/gui.png")

        size = (pygame.display.Info().current_w, pygame.display.Info().current_h)
        print "Framebuffer size: %d x %d" % (size[0], size[1])
        self.screen = pygame.display.set_mode(size, pygame.FULLSCREEN)


        self.images = []
        self.images.append(pygame.image.load("img/rl.png"))
        self.images.append(pygame.image.load("img/rr.png"))
        self.images.append(pygame.image.load("img/ml.png"))
        self.images.append(pygame.image.load("img/mr.png"))
        self.images.append(pygame.image.load("img/fl.png"))
        self.images.append(pygame.image.load("img/fr.png"))

        self.limbcontrol = []
        self.limbcontrol.append(pygame.image.load("img/disabled.png"))
        self.limbcontrol.append(pygame.image.load("img/enabled.png"))

        self.selection = 0
        self.buttons = []
        self.buttons.append(pygame.Rect(91,133,74,55))
        self.buttons.append(pygame.Rect(34,68,69,77))
        self.buttons.append(pygame.Rect(32,183,69,68))
        self.buttons.append(pygame.Rect(107,52,57,78))
        self.buttons.append(pygame.Rect(104,186,57,83))
        self.buttons.append(pygame.Rect(156,90,62,48))
        self.buttons.append(pygame.Rect(153,182,62,53))
        self.buttons.append(pygame.Rect(415,256,41,41))

        self.controls = []
        self.controls.append(pygame.Rect(260,205,41,41))
        self.controls.append(pygame.Rect(301,205,41,41))
        self.controls.append(pygame.Rect(342,205,41,41))


        self.cmd = []
        self.cmd.append("#0 P2000\r")
        self.cmd.append("#0 P1500\r")
        self.cmd.append("#0 P1000\r")
        
        # Clear the screen to start
        self.screen.fill((0, 0, 0))        
        # Initialise font support
        pygame.font.init()
        # Render the screen
        pygame.display.update()
        
        self.port = serial.Serial(
            port='/dev/ttyACM0',
            baudrate=115200
        )
       # self.robotController = XboxController.XboxController(
       #     controllerCallBack = None,
       #     joystickNo = 0,
       #     deadzone = 0.1,
       #     scale = 1,
       #     invertYAxis = False)

    def __del__(self):
        "Destructor to make sure pygame shuts down, etc."
 
    def ctrlCallback(ctrlId, val):
        print "Control id = {}, Value = {}".format(ctrlId, val)

    def drawGui(self):
        self.screen.blit(self.gui_image, (0,0))

        font = pygame.font.SysFont("monospace", 11)
        label = font.render(self.limbs[self.selection] + " limb selected", 1, (255,255,255))
        
        if self.selection != 0 and self.selection <= 6:
            self.screen.blit(self.images[self.selection-1], self.buttons[self.selection])
            self.screen.blit(self.limbcontrol[1], (260,205))
        elif self.selection == 7:
            os.system("shutdown -hP 0")
        else:
            self.screen.blit(self.limbcontrol[0], (260,205))
        self.screen.blit(label, (250, 185))
        # Update the display
        pygame.display.update()

    def clickEvent(self, pos):
        for i, b in enumerate(self.buttons):
            if b.collidepoint(pos):
                self.selection = i;
 
        for i, b in enumerate(self.controls):
            if b.collidepoint(pos):
                if i <= 2:
                    self.port.write(self.cmd[i])

# Create an instance of the PyScope class
gui = robogui()
#gui.controller.start()
run = 1
gui.port.open()
while run:
    gui.drawGui()
    time.sleep(0.1)
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                #run = 0
                gui.clickEvent(pygame.mouse.get_pos())
                break
#gui.controller.stop()

gui.port.close()
